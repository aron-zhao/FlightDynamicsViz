{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Float32BufferAttribute, InstancedBufferAttribute, InterleavedBuffer, InterleavedBufferAttribute, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, Vector3 } from 'three';\nfunction computeMikkTSpaceTangents(geometry, MikkTSpace) {\n  var negateSign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!MikkTSpace || !MikkTSpace.isReady) {\n    throw new Error('BufferGeometryUtils: Initialized MikkTSpace library required.');\n  }\n  if (!geometry.hasAttribute('position') || !geometry.hasAttribute('normal') || !geometry.hasAttribute('uv')) {\n    throw new Error('BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.');\n  }\n  function getAttributeArray(attribute) {\n    if (attribute.normalized || attribute.isInterleavedBufferAttribute) {\n      var dstArray = new Float32Array(attribute.count * attribute.itemSize);\n      for (var i = 0, j = 0; i < attribute.count; i++) {\n        dstArray[j++] = attribute.getX(i);\n        dstArray[j++] = attribute.getY(i);\n        if (attribute.itemSize > 2) {\n          dstArray[j++] = attribute.getZ(i);\n        }\n      }\n      return dstArray;\n    }\n    if (attribute.array instanceof Float32Array) {\n      return attribute.array;\n    }\n    return new Float32Array(attribute.array);\n  }\n\n  // MikkTSpace algorithm requires non-indexed input.\n\n  var _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n  // Compute vertex tangents.\n\n  var tangents = MikkTSpace.generateTangents(getAttributeArray(_geometry.attributes.position), getAttributeArray(_geometry.attributes.normal), getAttributeArray(_geometry.attributes.uv));\n\n  // Texture coordinate convention of glTF differs from the apparent\n  // default of the MikkTSpace library; .w component must be flipped.\n\n  if (negateSign) {\n    for (var i = 3; i < tangents.length; i += 4) {\n      tangents[i] *= -1;\n    }\n  }\n\n  //\n\n  _geometry.setAttribute('tangent', new BufferAttribute(tangents, 4));\n  if (geometry !== _geometry) {\n    geometry.copy(_geometry);\n  }\n  return geometry;\n}\n\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\nfunction mergeGeometries(geometries) {\n  var useGroups = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var isIndexed = geometries[0].index !== null;\n  var attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  var morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));\n  var attributes = {};\n  var morphAttributes = {};\n  var morphTargetsRelative = geometries[0].morphTargetsRelative;\n  var mergedGeometry = new BufferGeometry();\n  var offset = 0;\n  for (var i = 0; i < geometries.length; ++i) {\n    var geometry = geometries[i];\n    var attributesCount = 0;\n\n    // ensure that all geometries are indexed, or none\n\n    if (isIndexed !== (geometry.index !== null)) {\n      console.error('THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n      return null;\n    }\n\n    // gather attributes, exit early if they're different\n\n    for (var name in geometry.attributes) {\n      if (!attributesUsed.has(name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n        return null;\n      }\n      if (attributes[name] === undefined) attributes[name] = [];\n      attributes[name].push(geometry.attributes[name]);\n      attributesCount++;\n    }\n\n    // ensure geometries have the same number of attributes\n\n    if (attributesCount !== attributesUsed.size) {\n      console.error('THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.');\n      return null;\n    }\n\n    // gather morph attributes, exit early if they're different\n\n    if (morphTargetsRelative !== geometry.morphTargetsRelative) {\n      console.error('THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.');\n      return null;\n    }\n    for (var _name in geometry.morphAttributes) {\n      if (!morphAttributesUsed.has(_name)) {\n        console.error('THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.');\n        return null;\n      }\n      if (morphAttributes[_name] === undefined) morphAttributes[_name] = [];\n      morphAttributes[_name].push(geometry.morphAttributes[_name]);\n    }\n    if (useGroups) {\n      var count = void 0;\n      if (isIndexed) {\n        count = geometry.index.count;\n      } else if (geometry.attributes.position !== undefined) {\n        count = geometry.attributes.position.count;\n      } else {\n        console.error('THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute');\n        return null;\n      }\n      mergedGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  }\n\n  // merge indices\n\n  if (isIndexed) {\n    var indexOffset = 0;\n    var mergedIndex = [];\n    for (var _i = 0; _i < geometries.length; ++_i) {\n      var index = geometries[_i].index;\n      for (var j = 0; j < index.count; ++j) {\n        mergedIndex.push(index.getX(j) + indexOffset);\n      }\n      indexOffset += geometries[_i].attributes.position.count;\n    }\n    mergedGeometry.setIndex(mergedIndex);\n  }\n\n  // merge attributes\n\n  for (var _name2 in attributes) {\n    var mergedAttribute = mergeAttributes(attributes[_name2]);\n    if (!mergedAttribute) {\n      console.error('THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + _name2 + ' attribute.');\n      return null;\n    }\n    mergedGeometry.setAttribute(_name2, mergedAttribute);\n  }\n\n  // merge morph attributes\n\n  for (var _name3 in morphAttributes) {\n    var numMorphTargets = morphAttributes[_name3][0].length;\n    if (numMorphTargets === 0) break;\n    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n    mergedGeometry.morphAttributes[_name3] = [];\n    for (var _i2 = 0; _i2 < numMorphTargets; ++_i2) {\n      var morphAttributesToMerge = [];\n      for (var _j = 0; _j < morphAttributes[_name3].length; ++_j) {\n        morphAttributesToMerge.push(morphAttributes[_name3][_j][_i2]);\n      }\n      var mergedMorphAttribute = mergeAttributes(morphAttributesToMerge);\n      if (!mergedMorphAttribute) {\n        console.error('THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + _name3 + ' morphAttribute.');\n        return null;\n      }\n      mergedGeometry.morphAttributes[_name3].push(mergedMorphAttribute);\n    }\n  }\n  return mergedGeometry;\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\nfunction mergeAttributes(attributes) {\n  var TypedArray;\n  var itemSize;\n  var normalized;\n  var arrayLength = 0;\n  for (var i = 0; i < attributes.length; ++i) {\n    var attribute = attributes[i];\n    if (attribute.isInterleavedBufferAttribute) {\n      console.error('THREE.BufferGeometryUtils: .mergeAttributes() failed. InterleavedBufferAttributes are not supported.');\n      return null;\n    }\n    if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n    if (TypedArray !== attribute.array.constructor) {\n      console.error('THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.');\n      return null;\n    }\n    if (itemSize === undefined) itemSize = attribute.itemSize;\n    if (itemSize !== attribute.itemSize) {\n      console.error('THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.');\n      return null;\n    }\n    if (normalized === undefined) normalized = attribute.normalized;\n    if (normalized !== attribute.normalized) {\n      console.error('THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.');\n      return null;\n    }\n    arrayLength += attribute.array.length;\n  }\n  var array = new TypedArray(arrayLength);\n  var offset = 0;\n  for (var _i3 = 0; _i3 < attributes.length; ++_i3) {\n    array.set(attributes[_i3].array, offset);\n    offset += attributes[_i3].array.length;\n  }\n  return new BufferAttribute(array, itemSize, normalized);\n}\n\n/**\n * @param {BufferAttribute}\n * @return {BufferAttribute}\n */\nexport function deepCloneAttribute(attribute) {\n  if (attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute) {\n    return deinterleaveAttribute(attribute);\n  }\n  if (attribute.isInstancedBufferAttribute) {\n    return new InstancedBufferAttribute().copy(attribute);\n  }\n  return new BufferAttribute().copy(attribute);\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\nfunction interleaveAttributes(attributes) {\n  // Interleaves the provided attributes into an InterleavedBuffer and returns\n  // a set of InterleavedBufferAttributes for each attribute\n  var TypedArray;\n  var arrayLength = 0;\n  var stride = 0;\n\n  // calculate the length and type of the interleavedBuffer\n  for (var i = 0, l = attributes.length; i < l; ++i) {\n    var attribute = attributes[i];\n    if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n    if (TypedArray !== attribute.array.constructor) {\n      console.error('AttributeBuffers of different types cannot be interleaved');\n      return null;\n    }\n    arrayLength += attribute.array.length;\n    stride += attribute.itemSize;\n  }\n\n  // Create the set of buffer attributes\n  var interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);\n  var offset = 0;\n  var res = [];\n  var getters = ['getX', 'getY', 'getZ', 'getW'];\n  var setters = ['setX', 'setY', 'setZ', 'setW'];\n  for (var j = 0, _l = attributes.length; j < _l; j++) {\n    var _attribute = attributes[j];\n    var itemSize = _attribute.itemSize;\n    var count = _attribute.count;\n    var iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, _attribute.normalized);\n    res.push(iba);\n    offset += itemSize;\n\n    // Move the data for each attribute into the new interleavedBuffer\n    // at the appropriate offset\n    for (var c = 0; c < count; c++) {\n      for (var k = 0; k < itemSize; k++) {\n        iba[setters[k]](c, _attribute[getters[k]](c));\n      }\n    }\n  }\n  return res;\n}\n\n// returns a new, non-interleaved version of the provided attribute\nexport function deinterleaveAttribute(attribute) {\n  var cons = attribute.data.array.constructor;\n  var count = attribute.count;\n  var itemSize = attribute.itemSize;\n  var normalized = attribute.normalized;\n  var array = new cons(count * itemSize);\n  var newAttribute;\n  if (attribute.isInstancedInterleavedBufferAttribute) {\n    newAttribute = new InstancedBufferAttribute(array, itemSize, normalized, attribute.meshPerAttribute);\n  } else {\n    newAttribute = new BufferAttribute(array, itemSize, normalized);\n  }\n  for (var i = 0; i < count; i++) {\n    newAttribute.setX(i, attribute.getX(i));\n    if (itemSize >= 2) {\n      newAttribute.setY(i, attribute.getY(i));\n    }\n    if (itemSize >= 3) {\n      newAttribute.setZ(i, attribute.getZ(i));\n    }\n    if (itemSize >= 4) {\n      newAttribute.setW(i, attribute.getW(i));\n    }\n  }\n  return newAttribute;\n}\n\n// deinterleaves all attributes on the geometry\nexport function deinterleaveGeometry(geometry) {\n  var attributes = geometry.attributes;\n  var morphTargets = geometry.morphTargets;\n  var attrMap = new Map();\n  for (var key in attributes) {\n    var attr = attributes[key];\n    if (attr.isInterleavedBufferAttribute) {\n      if (!attrMap.has(attr)) {\n        attrMap.set(attr, deinterleaveAttribute(attr));\n      }\n      attributes[key] = attrMap.get(attr);\n    }\n  }\n  for (var _key in morphTargets) {\n    var _attr = morphTargets[_key];\n    if (_attr.isInterleavedBufferAttribute) {\n      if (!attrMap.has(_attr)) {\n        attrMap.set(_attr, deinterleaveAttribute(_attr));\n      }\n      morphTargets[_key] = attrMap.get(_attr);\n    }\n  }\n}\n\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\nfunction estimateBytesUsed(geometry) {\n  // Return the estimated memory used by this geometry in bytes\n  // Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n  // for InterleavedBufferAttributes.\n  var mem = 0;\n  for (var name in geometry.attributes) {\n    var attr = geometry.getAttribute(name);\n    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n  }\n  var indices = geometry.getIndex();\n  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n  return mem;\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry}\n */\nfunction mergeVertices(geometry) {\n  var tolerance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-4;\n  tolerance = Math.max(tolerance, Number.EPSILON);\n\n  // Generate an index buffer if the geometry doesn't have one, or optimize it\n  // if it's already available.\n  var hashToIndex = {};\n  var indices = geometry.getIndex();\n  var positions = geometry.getAttribute('position');\n  var vertexCount = indices ? indices.count : positions.count;\n\n  // next value for triangle indices\n  var nextIndex = 0;\n\n  // attributes and new attribute arrays\n  var attributeNames = Object.keys(geometry.attributes);\n  var tmpAttributes = {};\n  var tmpMorphAttributes = {};\n  var newIndices = [];\n  var getters = ['getX', 'getY', 'getZ', 'getW'];\n  var setters = ['setX', 'setY', 'setZ', 'setW'];\n\n  // Initialize the arrays, allocating space conservatively. Extra\n  // space will be trimmed in the last step.\n  for (var i = 0, l = attributeNames.length; i < l; i++) {\n    var name = attributeNames[i];\n    var attr = geometry.attributes[name];\n    tmpAttributes[name] = new BufferAttribute(new attr.array.constructor(attr.count * attr.itemSize), attr.itemSize, attr.normalized);\n    var morphAttr = geometry.morphAttributes[name];\n    if (morphAttr) {\n      tmpMorphAttributes[name] = new BufferAttribute(new morphAttr.array.constructor(morphAttr.count * morphAttr.itemSize), morphAttr.itemSize, morphAttr.normalized);\n    }\n  }\n\n  // convert the error tolerance to an amount of decimal places to truncate to\n  var decimalShift = Math.log10(1 / tolerance);\n  var shiftMultiplier = Math.pow(10, decimalShift);\n  for (var _i4 = 0; _i4 < vertexCount; _i4++) {\n    var index = indices ? indices.getX(_i4) : _i4;\n\n    // Generate a hash for the vertex attributes at the current index 'i'\n    var hash = '';\n    for (var j = 0, _l2 = attributeNames.length; j < _l2; j++) {\n      var _name4 = attributeNames[j];\n      var attribute = geometry.getAttribute(_name4);\n      var itemSize = attribute.itemSize;\n      for (var k = 0; k < itemSize; k++) {\n        // double tilde truncates the decimal value\n        hash += \"\".concat(~~(attribute[getters[k]](index) * shiftMultiplier), \",\");\n      }\n    }\n\n    // Add another reference to the vertex if it's already\n    // used by another index\n    if (hash in hashToIndex) {\n      newIndices.push(hashToIndex[hash]);\n    } else {\n      // copy data to the new index in the temporary attributes\n      for (var _j2 = 0, _l3 = attributeNames.length; _j2 < _l3; _j2++) {\n        var _name5 = attributeNames[_j2];\n        var _attribute2 = geometry.getAttribute(_name5);\n        var _morphAttr = geometry.morphAttributes[_name5];\n        var _itemSize = _attribute2.itemSize;\n        var newarray = tmpAttributes[_name5];\n        var newMorphArrays = tmpMorphAttributes[_name5];\n        for (var _k = 0; _k < _itemSize; _k++) {\n          var getterFunc = getters[_k];\n          var setterFunc = setters[_k];\n          newarray[setterFunc](nextIndex, _attribute2[getterFunc](index));\n          if (_morphAttr) {\n            for (var m = 0, ml = _morphAttr.length; m < ml; m++) {\n              newMorphArrays[m][setterFunc](nextIndex, _morphAttr[m][getterFunc](index));\n            }\n          }\n        }\n      }\n      hashToIndex[hash] = nextIndex;\n      newIndices.push(nextIndex);\n      nextIndex++;\n    }\n  }\n\n  // generate result BufferGeometry\n  var result = geometry.clone();\n  for (var _name6 in geometry.attributes) {\n    var tmpAttribute = tmpAttributes[_name6];\n    result.setAttribute(_name6, new BufferAttribute(tmpAttribute.array.slice(0, nextIndex * tmpAttribute.itemSize), tmpAttribute.itemSize, tmpAttribute.normalized));\n    if (!(_name6 in tmpMorphAttributes)) continue;\n    for (var _j3 = 0; _j3 < tmpMorphAttributes[_name6].length; _j3++) {\n      var tmpMorphAttribute = tmpMorphAttributes[_name6][_j3];\n      result.morphAttributes[_name6][_j3] = new BufferAttribute(tmpMorphAttribute.array.slice(0, nextIndex * tmpMorphAttribute.itemSize), tmpMorphAttribute.itemSize, tmpMorphAttribute.normalized);\n    }\n  }\n\n  // indices\n\n  result.setIndex(newIndices);\n  return result;\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\nfunction toTrianglesDrawMode(geometry, drawMode) {\n  if (drawMode === TrianglesDrawMode) {\n    console.warn('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.');\n    return geometry;\n  }\n  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {\n    var index = geometry.getIndex();\n\n    // generate index if not present\n\n    if (index === null) {\n      var indices = [];\n      var position = geometry.getAttribute('position');\n      if (position !== undefined) {\n        for (var i = 0; i < position.count; i++) {\n          indices.push(i);\n        }\n        geometry.setIndex(indices);\n        index = geometry.getIndex();\n      } else {\n        console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n        return geometry;\n      }\n    }\n\n    //\n\n    var numberOfTriangles = index.count - 2;\n    var newIndices = [];\n    if (drawMode === TriangleFanDrawMode) {\n      // gl.TRIANGLE_FAN\n\n      for (var _i5 = 1; _i5 <= numberOfTriangles; _i5++) {\n        newIndices.push(index.getX(0));\n        newIndices.push(index.getX(_i5));\n        newIndices.push(index.getX(_i5 + 1));\n      }\n    } else {\n      // gl.TRIANGLE_STRIP\n\n      for (var _i6 = 0; _i6 < numberOfTriangles; _i6++) {\n        if (_i6 % 2 === 0) {\n          newIndices.push(index.getX(_i6));\n          newIndices.push(index.getX(_i6 + 1));\n          newIndices.push(index.getX(_i6 + 2));\n        } else {\n          newIndices.push(index.getX(_i6 + 2));\n          newIndices.push(index.getX(_i6 + 1));\n          newIndices.push(index.getX(_i6));\n        }\n      }\n    }\n    if (newIndices.length / 3 !== numberOfTriangles) {\n      console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n    }\n\n    // build final geometry\n\n    var newGeometry = geometry.clone();\n    newGeometry.setIndex(newIndices);\n    newGeometry.clearGroups();\n    return newGeometry;\n  } else {\n    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);\n    return geometry;\n  }\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes(object) {\n  var _vA = new Vector3();\n  var _vB = new Vector3();\n  var _vC = new Vector3();\n  var _tempA = new Vector3();\n  var _tempB = new Vector3();\n  var _tempC = new Vector3();\n  var _morphA = new Vector3();\n  var _morphB = new Vector3();\n  var _morphC = new Vector3();\n  function _calculateMorphedAttributeData(object, attribute, morphAttribute, morphTargetsRelative, a, b, c, modifiedAttributeArray) {\n    _vA.fromBufferAttribute(attribute, a);\n    _vB.fromBufferAttribute(attribute, b);\n    _vC.fromBufferAttribute(attribute, c);\n    var morphInfluences = object.morphTargetInfluences;\n    if (morphAttribute && morphInfluences) {\n      _morphA.set(0, 0, 0);\n      _morphB.set(0, 0, 0);\n      _morphC.set(0, 0, 0);\n      for (var _i7 = 0, _il = morphAttribute.length; _i7 < _il; _i7++) {\n        var influence = morphInfluences[_i7];\n        var morph = morphAttribute[_i7];\n        if (influence === 0) continue;\n        _tempA.fromBufferAttribute(morph, a);\n        _tempB.fromBufferAttribute(morph, b);\n        _tempC.fromBufferAttribute(morph, c);\n        if (morphTargetsRelative) {\n          _morphA.addScaledVector(_tempA, influence);\n          _morphB.addScaledVector(_tempB, influence);\n          _morphC.addScaledVector(_tempC, influence);\n        } else {\n          _morphA.addScaledVector(_tempA.sub(_vA), influence);\n          _morphB.addScaledVector(_tempB.sub(_vB), influence);\n          _morphC.addScaledVector(_tempC.sub(_vC), influence);\n        }\n      }\n      _vA.add(_morphA);\n      _vB.add(_morphB);\n      _vC.add(_morphC);\n    }\n    if (object.isSkinnedMesh) {\n      object.applyBoneTransform(a, _vA);\n      object.applyBoneTransform(b, _vB);\n      object.applyBoneTransform(c, _vC);\n    }\n    modifiedAttributeArray[a * 3 + 0] = _vA.x;\n    modifiedAttributeArray[a * 3 + 1] = _vA.y;\n    modifiedAttributeArray[a * 3 + 2] = _vA.z;\n    modifiedAttributeArray[b * 3 + 0] = _vB.x;\n    modifiedAttributeArray[b * 3 + 1] = _vB.y;\n    modifiedAttributeArray[b * 3 + 2] = _vB.z;\n    modifiedAttributeArray[c * 3 + 0] = _vC.x;\n    modifiedAttributeArray[c * 3 + 1] = _vC.y;\n    modifiedAttributeArray[c * 3 + 2] = _vC.z;\n  }\n  var geometry = object.geometry;\n  var material = object.material;\n  var a, b, c;\n  var index = geometry.index;\n  var positionAttribute = geometry.attributes.position;\n  var morphPosition = geometry.morphAttributes.position;\n  var morphTargetsRelative = geometry.morphTargetsRelative;\n  var normalAttribute = geometry.attributes.normal;\n  var morphNormal = geometry.morphAttributes.position;\n  var groups = geometry.groups;\n  var drawRange = geometry.drawRange;\n  var i, j, il, jl;\n  var group;\n  var start, end;\n  var modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);\n  var modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);\n  if (index !== null) {\n    // indexed buffer geometry\n\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = index.getX(j);\n          b = index.getX(j + 1);\n          c = index.getX(j + 2);\n          _calculateMorphedAttributeData(object, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n          _calculateMorphedAttributeData(object, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(index.count, drawRange.start + drawRange.count);\n      for (i = start, il = end; i < il; i += 3) {\n        a = index.getX(i);\n        b = index.getX(i + 1);\n        c = index.getX(i + 2);\n        _calculateMorphedAttributeData(object, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n        _calculateMorphedAttributeData(object, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  } else {\n    // non-indexed buffer geometry\n\n    if (Array.isArray(material)) {\n      for (i = 0, il = groups.length; i < il; i++) {\n        group = groups[i];\n        start = Math.max(group.start, drawRange.start);\n        end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n        for (j = start, jl = end; j < jl; j += 3) {\n          a = j;\n          b = j + 1;\n          c = j + 2;\n          _calculateMorphedAttributeData(object, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n          _calculateMorphedAttributeData(object, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n        }\n      }\n    } else {\n      start = Math.max(0, drawRange.start);\n      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\n      for (i = start, il = end; i < il; i += 3) {\n        a = i;\n        b = i + 1;\n        c = i + 2;\n        _calculateMorphedAttributeData(object, positionAttribute, morphPosition, morphTargetsRelative, a, b, c, modifiedPosition);\n        _calculateMorphedAttributeData(object, normalAttribute, morphNormal, morphTargetsRelative, a, b, c, modifiedNormal);\n      }\n    }\n  }\n  var morphedPositionAttribute = new Float32BufferAttribute(modifiedPosition, 3);\n  var morphedNormalAttribute = new Float32BufferAttribute(modifiedNormal, 3);\n  return {\n    positionAttribute: positionAttribute,\n    normalAttribute: normalAttribute,\n    morphedPositionAttribute: morphedPositionAttribute,\n    morphedNormalAttribute: morphedNormalAttribute\n  };\n}\nfunction mergeGroups(geometry) {\n  if (geometry.groups.length === 0) {\n    console.warn('THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.');\n    return geometry;\n  }\n  var groups = geometry.groups;\n\n  // sort groups by material index\n\n  groups = groups.sort(function (a, b) {\n    if (a.materialIndex !== b.materialIndex) return a.materialIndex - b.materialIndex;\n    return a.start - b.start;\n  });\n\n  // create index for non-indexed geometries\n\n  if (geometry.getIndex() === null) {\n    var positionAttribute = geometry.getAttribute('position');\n    var indices = [];\n    for (var i = 0; i < positionAttribute.count; i += 3) {\n      indices.push(i, i + 1, i + 2);\n    }\n    geometry.setIndex(indices);\n  }\n\n  // sort index\n\n  var index = geometry.getIndex();\n  var newIndices = [];\n  for (var _i8 = 0; _i8 < groups.length; _i8++) {\n    var group = groups[_i8];\n    var groupStart = group.start;\n    var groupLength = groupStart + group.count;\n    for (var j = groupStart; j < groupLength; j++) {\n      newIndices.push(index.getX(j));\n    }\n  }\n  geometry.dispose(); // Required to force buffer recreation\n  geometry.setIndex(newIndices);\n\n  // update groups indices\n\n  var start = 0;\n  for (var _i9 = 0; _i9 < groups.length; _i9++) {\n    var _group = groups[_i9];\n    _group.start = start;\n    start += _group.count;\n  }\n\n  // merge groups\n\n  var currentGroup = groups[0];\n  geometry.groups = [currentGroup];\n  for (var _i10 = 1; _i10 < groups.length; _i10++) {\n    var _group2 = groups[_i10];\n    if (currentGroup.materialIndex === _group2.materialIndex) {\n      currentGroup.count += _group2.count;\n    } else {\n      currentGroup = _group2;\n      geometry.groups.push(currentGroup);\n    }\n  }\n  return geometry;\n}\n\n// Creates a new, non-indexed geometry with smooth normals everywhere except faces that meet at\n// an angle greater than the crease angle.\nfunction toCreasedNormals(geometry) {\n  var creaseAngle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.PI / 3;\n  var creaseDot = Math.cos(creaseAngle);\n  var hashMultiplier = (1 + 1e-10) * 1e2;\n\n  // reusable vertors\n  var verts = [new Vector3(), new Vector3(), new Vector3()];\n  var tempVec1 = new Vector3();\n  var tempVec2 = new Vector3();\n  var tempNorm = new Vector3();\n  var tempNorm2 = new Vector3();\n\n  // hashes a vector\n  function hashVertex(v) {\n    var x = ~~(v.x * hashMultiplier);\n    var y = ~~(v.y * hashMultiplier);\n    var z = ~~(v.z * hashMultiplier);\n    return \"\".concat(x, \",\").concat(y, \",\").concat(z);\n  }\n  var resultGeometry = geometry.toNonIndexed();\n  var posAttr = resultGeometry.attributes.position;\n  var vertexMap = {};\n\n  // find all the normals shared by commonly located vertices\n  for (var i = 0, l = posAttr.count / 3; i < l; i++) {\n    var i3 = 3 * i;\n    var a = verts[0].fromBufferAttribute(posAttr, i3 + 0);\n    var b = verts[1].fromBufferAttribute(posAttr, i3 + 1);\n    var c = verts[2].fromBufferAttribute(posAttr, i3 + 2);\n    tempVec1.subVectors(c, b);\n    tempVec2.subVectors(a, b);\n\n    // add the normal to the map for all vertices\n    var normal = new Vector3().crossVectors(tempVec1, tempVec2).normalize();\n    for (var n = 0; n < 3; n++) {\n      var vert = verts[n];\n      var hash = hashVertex(vert);\n      if (!(hash in vertexMap)) {\n        vertexMap[hash] = [];\n      }\n      vertexMap[hash].push(normal);\n    }\n  }\n\n  // average normals from all vertices that share a common location if they are within the\n  // provided crease threshold\n  var normalArray = new Float32Array(posAttr.count * 3);\n  var normAttr = new BufferAttribute(normalArray, 3, false);\n  for (var _i11 = 0, _l4 = posAttr.count / 3; _i11 < _l4; _i11++) {\n    // get the face normal for this vertex\n    var _i12 = 3 * _i11;\n    var _a = verts[0].fromBufferAttribute(posAttr, _i12 + 0);\n    var _b = verts[1].fromBufferAttribute(posAttr, _i12 + 1);\n    var _c = verts[2].fromBufferAttribute(posAttr, _i12 + 2);\n    tempVec1.subVectors(_c, _b);\n    tempVec2.subVectors(_a, _b);\n    tempNorm.crossVectors(tempVec1, tempVec2).normalize();\n\n    // average all normals that meet the threshold and set the normal value\n    for (var _n = 0; _n < 3; _n++) {\n      var _vert = verts[_n];\n      var _hash = hashVertex(_vert);\n      var otherNormals = vertexMap[_hash];\n      tempNorm2.set(0, 0, 0);\n      for (var k = 0, lk = otherNormals.length; k < lk; k++) {\n        var otherNorm = otherNormals[k];\n        if (tempNorm.dot(otherNorm) > creaseDot) {\n          tempNorm2.add(otherNorm);\n        }\n      }\n      tempNorm2.normalize();\n      normAttr.setXYZ(_i12 + _n, tempNorm2.x, tempNorm2.y, tempNorm2.z);\n    }\n  }\n  resultGeometry.setAttribute('normal', normAttr);\n  return resultGeometry;\n}\nfunction mergeBufferGeometries(geometries) {\n  var useGroups = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  console.warn('THREE.BufferGeometryUtils: mergeBufferGeometries() has been renamed to mergeGeometries().'); // @deprecated, r151\n  return mergeGeometries(geometries, useGroups);\n}\nfunction mergeBufferAttributes(attributes) {\n  console.warn('THREE.BufferGeometryUtils: mergeBufferAttributes() has been renamed to mergeAttributes().'); // @deprecated, r151\n  return mergeAttributes(attributes);\n}\nexport { computeMikkTSpaceTangents, mergeGeometries, mergeBufferGeometries, mergeAttributes, mergeBufferAttributes, interleaveAttributes, estimateBytesUsed, mergeVertices, toTrianglesDrawMode, computeMorphedAttributes, mergeGroups, toCreasedNormals };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Float32BufferAttribute","InstancedBufferAttribute","InterleavedBuffer","InterleavedBufferAttribute","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Vector3","computeMikkTSpaceTangents","geometry","MikkTSpace","negateSign","arguments","length","undefined","isReady","Error","hasAttribute","getAttributeArray","attribute","normalized","isInterleavedBufferAttribute","dstArray","Float32Array","count","itemSize","i","j","getX","getY","getZ","array","_geometry","index","toNonIndexed","tangents","generateTangents","attributes","position","normal","uv","setAttribute","copy","mergeGeometries","geometries","useGroups","isIndexed","attributesUsed","Set","Object","keys","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","attributesCount","console","error","name","has","push","size","addGroup","indexOffset","mergedIndex","setIndex","mergedAttribute","mergeAttributes","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","arrayLength","constructor","set","deepCloneAttribute","isInstancedInterleavedBufferAttribute","deinterleaveAttribute","isInstancedBufferAttribute","interleaveAttributes","stride","l","interleavedBuffer","res","getters","setters","iba","c","k","cons","data","newAttribute","meshPerAttribute","setX","setY","setZ","setW","getW","deinterleaveGeometry","morphTargets","attrMap","Map","key","attr","get","estimateBytesUsed","mem","getAttribute","BYTES_PER_ELEMENT","indices","getIndex","mergeVertices","tolerance","Math","max","Number","EPSILON","hashToIndex","positions","vertexCount","nextIndex","attributeNames","tmpAttributes","tmpMorphAttributes","newIndices","morphAttr","decimalShift","log10","shiftMultiplier","pow","hash","concat","newarray","newMorphArrays","getterFunc","setterFunc","m","ml","result","clone","tmpAttribute","slice","tmpMorphAttribute","toTrianglesDrawMode","drawMode","warn","numberOfTriangles","newGeometry","clearGroups","computeMorphedAttributes","object","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_calculateMorphedAttributeData","morphAttribute","a","b","modifiedAttributeArray","fromBufferAttribute","morphInfluences","morphTargetInfluences","il","influence","morph","addScaledVector","sub","add","isSkinnedMesh","applyBoneTransform","x","y","z","material","positionAttribute","morphPosition","normalAttribute","morphNormal","groups","drawRange","jl","group","start","end","modifiedPosition","modifiedNormal","Array","isArray","min","morphedPositionAttribute","morphedNormalAttribute","mergeGroups","sort","materialIndex","groupStart","groupLength","dispose","currentGroup","toCreasedNormals","creaseAngle","PI","creaseDot","cos","hashMultiplier","verts","tempVec1","tempVec2","tempNorm","tempNorm2","hashVertex","v","resultGeometry","posAttr","vertexMap","i3","subVectors","crossVectors","normalize","n","vert","normalArray","normAttr","otherNormals","lk","otherNorm","dot","setXYZ","mergeBufferGeometries","mergeBufferAttributes"],"sources":["C:/Projects/Flight Dynamics Viz/node_modules/three/examples/jsm/utils/BufferGeometryUtils.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInstancedBufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3,\n} from 'three';\n\nfunction computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {\n\n\tif ( ! MikkTSpace || ! MikkTSpace.isReady ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );\n\n\t}\n\n\tif ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.' );\n\n\t}\n\n\tfunction getAttributeArray( attribute ) {\n\n\t\tif ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst dstArray = new Float32Array( attribute.count * attribute.itemSize );\n\n\t\t\tfor ( let i = 0, j = 0; i < attribute.count; i ++ ) {\n\n\t\t\t\tdstArray[ j ++ ] = attribute.getX( i );\n\t\t\t\tdstArray[ j ++ ] = attribute.getY( i );\n\n\t\t\t\tif ( attribute.itemSize > 2 ) {\n\n\t\t\t\t\tdstArray[ j ++ ] = attribute.getZ( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t\tif ( attribute.array instanceof Float32Array ) {\n\n\t\t\treturn attribute.array;\n\n\t\t}\n\n\t\treturn new Float32Array( attribute.array );\n\n\t}\n\n\t// MikkTSpace algorithm requires non-indexed input.\n\n\tconst _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n\t// Compute vertex tangents.\n\n\tconst tangents = MikkTSpace.generateTangents(\n\n\t\tgetAttributeArray( _geometry.attributes.position ),\n\t\tgetAttributeArray( _geometry.attributes.normal ),\n\t\tgetAttributeArray( _geometry.attributes.uv )\n\n\t);\n\n\t// Texture coordinate convention of glTF differs from the apparent\n\t// default of the MikkTSpace library; .w component must be flipped.\n\n\tif ( negateSign ) {\n\n\t\tfor ( let i = 3; i < tangents.length; i += 4 ) {\n\n\t\t\ttangents[ i ] *= - 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\t_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );\n\n\tif ( geometry !== _geometry ) {\n\n\t\tgeometry.copy( _geometry );\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\nfunction mergeGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\nfunction mergeAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. InterleavedBufferAttributes are not supported.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tarray.set( attributes[ i ].array, offset );\n\n\t\toffset += attributes[ i ].array.length;\n\n\t}\n\n\treturn new BufferAttribute( array, itemSize, normalized );\n\n}\n\n/**\n * @param {BufferAttribute}\n * @return {BufferAttribute}\n */\nexport function deepCloneAttribute( attribute ) {\n\n\tif ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {\n\n\t\treturn deinterleaveAttribute( attribute );\n\n\t}\n\n\tif ( attribute.isInstancedBufferAttribute ) {\n\n\t\treturn new InstancedBufferAttribute().copy( attribute );\n\n\t}\n\n\treturn new BufferAttribute().copy( attribute );\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n// returns a new, non-interleaved version of the provided attribute\nexport function deinterleaveAttribute( attribute ) {\n\n\tconst cons = attribute.data.array.constructor;\n\tconst count = attribute.count;\n\tconst itemSize = attribute.itemSize;\n\tconst normalized = attribute.normalized;\n\n\tconst array = new cons( count * itemSize );\n\tlet newAttribute;\n\tif ( attribute.isInstancedInterleavedBufferAttribute ) {\n\n\t\tnewAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );\n\n\t} else {\n\n\t\tnewAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tnewAttribute.setX( i, attribute.getX( i ) );\n\n\t\tif ( itemSize >= 2 ) {\n\n\t\t\tnewAttribute.setY( i, attribute.getY( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 3 ) {\n\n\t\t\tnewAttribute.setZ( i, attribute.getZ( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 4 ) {\n\n\t\t\tnewAttribute.setW( i, attribute.getW( i ) );\n\n\t\t}\n\n\t}\n\n\treturn newAttribute;\n\n}\n\n// deinterleaves all attributes on the geometry\nexport function deinterleaveGeometry( geometry ) {\n\n\tconst attributes = geometry.attributes;\n\tconst morphTargets = geometry.morphTargets;\n\tconst attrMap = new Map();\n\n\tfor ( const key in attributes ) {\n\n\t\tconst attr = attributes[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tattributes[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n\tfor ( const key in morphTargets ) {\n\n\t\tconst attr = morphTargets[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tmorphTargets[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry}\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst tmpAttributes = {};\n\tconst tmpMorphAttributes = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t// Initialize the arrays, allocating space conservatively. Extra\n\t// space will be trimmed in the last step.\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst attr = geometry.attributes[ name ];\n\n\t\ttmpAttributes[ name ] = new BufferAttribute(\n\t\t\tnew attr.array.constructor( attr.count * attr.itemSize ),\n\t\t\tattr.itemSize,\n\t\t\tattr.normalized\n\t\t);\n\n\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\tif ( morphAttr ) {\n\n\t\t\ttmpMorphAttributes[ name ] = new BufferAttribute(\n\t\t\t\tnew morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize ),\n\t\t\t\tmorphAttr.itemSize,\n\t\t\t\tmorphAttr.normalized\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst decimalShift = Math.log10( 1 / tolerance );\n\tconst shiftMultiplier = Math.pow( 10, decimalShift );\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the temporary attributes\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newarray = tmpAttributes[ name ];\n\t\t\t\tconst newMorphArrays = tmpMorphAttributes[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tconst setterFunc = setters[ k ];\n\t\t\t\t\tnewarray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// generate result BufferGeometry\n\tconst result = geometry.clone();\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst tmpAttribute = tmpAttributes[ name ];\n\n\t\tresult.setAttribute( name, new BufferAttribute(\n\t\t\ttmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),\n\t\t\ttmpAttribute.itemSize,\n\t\t\ttmpAttribute.normalized,\n\t\t) );\n\n\t\tif ( ! ( name in tmpMorphAttributes ) ) continue;\n\n\t\tfor ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {\n\n\t\t\tconst tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];\n\n\t\t\tresult.morphAttributes[ name ][ j ] = new BufferAttribute(\n\t\t\t\ttmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),\n\t\t\t\ttmpMorphAttribute.itemSize,\n\t\t\t\ttmpMorphAttribute.normalized,\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.applyBoneTransform( a, _vA );\n\t\t\tobject.applyBoneTransform( b, _vB );\n\t\t\tobject.applyBoneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\nfunction mergeGroups( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );\n\t\treturn geometry;\n\n\t}\n\n\tlet groups = geometry.groups;\n\n\t// sort groups by material index\n\n\tgroups = groups.sort( ( a, b ) => {\n\n\t\tif ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;\n\n\t\treturn a.start - b.start;\n\n\t} );\n\n\t// create index for non-indexed geometries\n\n\tif ( geometry.getIndex() === null ) {\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\t\tconst indices = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tindices.push( i, i + 1, i + 2 );\n\n\t\t}\n\n\t\tgeometry.setIndex( indices );\n\n\t}\n\n\t// sort index\n\n\tconst index = geometry.getIndex();\n\n\tconst newIndices = [];\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tconst groupStart = group.start;\n\t\tconst groupLength = groupStart + group.count;\n\n\t\tfor ( let j = groupStart; j < groupLength; j ++ ) {\n\n\t\t\tnewIndices.push( index.getX( j ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dispose(); // Required to force buffer recreation\n\tgeometry.setIndex( newIndices );\n\n\t// update groups indices\n\n\tlet start = 0;\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tgroup.start = start;\n\t\tstart += group.count;\n\n\t}\n\n\t// merge groups\n\n\tlet currentGroup = groups[ 0 ];\n\n\tgeometry.groups = [ currentGroup ];\n\n\tfor ( let i = 1; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tif ( currentGroup.materialIndex === group.materialIndex ) {\n\n\t\t\tcurrentGroup.count += group.count;\n\n\t\t} else {\n\n\t\t\tcurrentGroup = group;\n\t\t\tgeometry.groups.push( currentGroup );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\n\n// Creates a new, non-indexed geometry with smooth normals everywhere except faces that meet at\n// an angle greater than the crease angle.\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vertors\n\tconst verts = [ new Vector3(), new Vector3(), new Vector3() ];\n\tconst tempVec1 = new Vector3();\n\tconst tempVec2 = new Vector3();\n\tconst tempNorm = new Vector3();\n\tconst tempNorm2 = new Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\tconst resultGeometry = geometry.toNonIndexed();\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nfunction mergeBufferGeometries( geometries, useGroups = false ) {\n\n\tconsole.warn( 'THREE.BufferGeometryUtils: mergeBufferGeometries() has been renamed to mergeGeometries().' ); // @deprecated, r151\n\treturn mergeGeometries( geometries, useGroups );\n\n}\n\nfunction mergeBufferAttributes( attributes ) {\n\n\tconsole.warn( 'THREE.BufferGeometryUtils: mergeBufferAttributes() has been renamed to mergeAttributes().' ); // @deprecated, r151\n\treturn mergeAttributes( attributes );\n\n}\n\nexport {\n\tcomputeMikkTSpaceTangents,\n\tmergeGeometries,\n\tmergeBufferGeometries,\n\tmergeAttributes,\n\tmergeBufferAttributes,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n\tmergeGroups,\n\ttoCreasedNormals\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}